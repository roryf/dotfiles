#!/usr/bin/env bash

# Inspired from: ~/.macos — https://mths.be/macos

# Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
osascript -e 'tell application "System Preferences" to quit'

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

echo "Hello $(whoami)! Let's get you set up."

echo "mkdir -p ${HOME}/Source"
mkdir -p "${HOME}/Source"

echo "installing homebrew"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

echo "brew installing stuff"
# ripgrep: rg is faster than alternatives
# imagemagick: eventually I will need this for something
# tree: really handy for listing out directories in text
# bat: A cat(1) clone with syntax highlighting and Git integration.
# z: Jump around directories
brew install git ripgrep imagemagick tree bat wget z

echo "installing node (via nvm)"
touch ~/.bash_profile
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash && . ~/.bash_profile
nvm install node
echo "node --version: $(node --version)"
echo "npm --version: $(npm --version)"

echo "installing a few global npm packages"
npm install --global tldr eslint

echo "installing apps with brew cask"
brew install --cask alfred google-chrome visual-studio-code vlc zoom spotify slack iterm2 docker httpie htop firefox imageoptim figma caffiene licecap flipper

echo "installing aws client"
curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
unzip awscli-bundle.zip
sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws

echo "Setup Git"
git clone git@github.com:roryf/dotfiles.git $HOME/Source/dotfiles
cp $HOME/Source/dotfiles/.gitconfig $HOME/.gitconfig
echo "Set up GitHub SSH keys"
cd $HOME/Source/dotfiles
ssh -T git@github.com &> /dev/null
if [ $? -ne 1 ]; then
  if ! [ -f $HOME/.ssh/github ]; then
    ssh-keygen -t rsa -b 4096 -C "badgrs@gmail.com" -f $HOME/.ssh/github
    printf "%s\n" \
        "Host github.com" \
        "  IdentityFile $HOME/.ssh/github" \
        "  LogLevel ERROR" >> ~/.ssh/config
    pbcopy $HOME/.ssh/github.pub
    open https://github.com/settings/ssh
    while true; do
        ssh -T git@github.com &> /dev/null
        [ $? -eq 1 ] && break
        sleep 5
    done
  else
    echo "$HOME/.ssh/github already exists"
  fi
fi

echo "installing xcode"
/bin/bash $HOME/Source/dotfiles/xcode.sh

echo "cleaning up files"
rm -rf awscli-bundle awscli-bundle.zip 

echo "making system modifications:"

###############################################################################
# VS Code                                                                     #
###############################################################################

code --install-extension dbaeumer.vscode-eslint 
code --install-extension esbenp.prettier-vscode
code --install-extension formulahendry.auto-rename-tag
mkdir -p "$HOME/Library/Application Support/Code/User"
cp $HOME/Source/dotfiles/vscode-settings.json "$HOME/Library/Application Support/Code/User/settings.json"

###############################################################################
# General UI/UX                                                               #
###############################################################################

# Set standby delay to 24 hours (default is 1 hour)
sudo pmset -a standbydelay 86400

# Expand save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Save to disk (not to iCloud) by default
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

# Disable the “Are you sure you want to open this application?” dialog
defaults write com.apple.LaunchServices LSQuarantine -bool false

# Disable the crash reporter
defaults write com.apple.CrashReporter DialogType -string "none"

# Reveal IP address, hostname, OS version, etc. when clicking the clock
# in the login window
sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

# Never go into computer sleep mode
sudo systemsetup -setcomputersleep Off > /dev/null

###############################################################################
# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
###############################################################################

# Trackpad: enable tap to click for this user and for the login screen
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

# Make Chrome Two finger swipe for back and forward
defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool TRUE

###############################################################################
# Screen                                                                      #
###############################################################################

# Save screenshots to the desktop
defaults write com.apple.screencapture location -string "${HOME}/Desktop"

# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
defaults write com.apple.screencapture type -string "png"

###############################################################################
# Dock, Dashboard, and hot corners                                            #
###############################################################################

# Show only open applications in the Dock
defaults write com.apple.dock static-only -bool true

# Automatically hide and show the Dock
defaults write com.apple.dock autohide -bool true

###############################################################################
# Kill affected applications                                                  #
###############################################################################

for app in "Activity Monitor" \
  "Address Book" \
  "Calendar" \
  "cfprefsd" \
  "Contacts" \
  "Dock" \
  "Finder" \
  "Mail" \
  "Messages" \
  "Photos" \
  "Safari" \
  "SystemUIServer" \
  "iCal"; do
  killall "${app}" &> /dev/null
done

###############################################################################
# Zsh                                                                         #
###############################################################################

echo "Install oh my zsh"
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
cp $HOME/Source/dotfiles/powerlevel9k.sh $HOME/.oh-my-zsh/custom/powerlevel9k.sh
echo "Setup zsh preferences"
cp $HOME/Source/dotfiles/.zshrc $HOME/.zshrc
wget -O "$HOME/Downloads/Solarized Dark - Patched.itermcolors" https://raw.githubusercontent.com/mbadolato/iTerm2-Color-Schemes/master/schemes/Solarized%20Dark%20-%20Patched.itermcolors
echo "Opening iterm2, goto preferences → profiles → colors → load presets to load Solarized Dark theme"
sleep 2
open "$HOME/Downloads/Solarized Dark - Patched.itermcolors"

echo "Done. Note that some of these changes require a logout/restart to take effect."
